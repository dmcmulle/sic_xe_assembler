import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

/**
 * Main controller for assembler. Contains the main function and logic to read
 * file, begin first and second pass, and write files.
 */
public class SICAssemble {
	// variable to store the program counter
	private int _locationCounter;

	// variable to store the start address
	private int _startAddress;

	// variable to store the first executable address (for use in end record)
	private int _firstExecAddress;

	// variable to store the program length
	private int _programLength;

	// variable to store the base address for type 3/4 statements
	private int _baseAddress;

	// variables to store optab, registertab, and symboltab
	private final Map<String, Operation> OPTAB;
	private final Map<String, Integer> REGTAB;
	private final Map<String, Integer> SYMTAB;

	/**
	 * Constructor for the assembler.
	 */
	public SICAssemble() {
		// build the optab
		OPTAB = TableBuilder.getOperaionTable();

		// build the register tab
		REGTAB = TableBuilder.getRegisterTable();

		// construct an empty symmtab
		SYMTAB = new HashMap<>();

		// add a null entry to it isn't accidentally inserted later
		SYMTAB.put(null, 0);
	}

	/**
	 * Begin assembly. Takes in input file and an output file as arguments.
	 * 
	 * @param input - input SIC file
	 * @param output - output object code file
	 * @throws IOException - File not found
	 * @throws ClassNotFoundException
	 *             -
	 */
	public void assemble(File input, File output) throws IOException,
			ClassNotFoundException {
		// this is where we will store our interfile
		File interFile = new File(".assembler.tmp");

		try {
			// create the new file
			interFile.createNewFile();

			// perform the first pass, save the data to the inter file
			firstPass(input, interFile);

			// perform the second pass, save the data to object file
			secondPass(interFile, output);
		} finally {
			// interFile.delete();
		}
	}

	/**
	 * Perform the first pass on the source file. 
	 * 1. Assign addresses to all statements in the program. 
	 * 2. Save the values (Addresses) assigned to all labels for use in Pass 2. 
	 * 3. Perform some processing of assembler directives. (This includes processing 
	 * that affects address assignment, such as determining the length of data areas 
	 * defined by BYTE, RESW, etc.)
	 * 
	 * @param input - sic program file location
	 * @param output - where interfile should be stored
	 * @throws IOException - file not found or cannot be read
	 */
	private void firstPass(File input, File output) throws IOException {
		// build the scanner
		try (Scanner scanner = new Scanner(input);
				//set the output stream to the interfile
				FileOutputStream ostream = new FileOutputStream(output);
				
				//build an object output stream to store our Statement objects
				ObjectOutputStream objOutputStream = new ObjectOutputStream(
						ostream);) {
			
			//default location
			_locationCounter = _startAddress = 0;
			
			//default first executable address
			_firstExecAddress = -1;

			//while still has lines
			while (scanner.hasNext()) {
				try {
					//parse the current line
					Statement statement = Statement.parse(scanner.nextLine());

					//if it's null or comment, break
					if (statement == null || statement.isComment()) {
						continue;
					}

					//else.. set the counter to current loc
					statement.setLocation(_locationCounter);
					
					//if the label is not null, check if it's in symtab.
					//if so, we must alert there is a duplicate symbol.
					if (statement.label() != null) {
						if (SYMTAB.containsKey(statement.label())) {
							throw new DuplicateSymbolException(statement);
						} else {
							SYMTAB.put(statement.label(), _locationCounter);
						}
					}
					
					//check the operation for special cases
					switch (statement.operation()) {
					//if start, set start address here
					case "START":
						_startAddress = Integer.parseInt(statement.operand1());
						statement.setLocation(_locationCounter = _startAddress);
						break;
					//if end, ignore line
					case "END":
						break;
					//if word, we increase loc by 3
					case "WORD":
						_locationCounter += 3;
						break;
					//if resw, we increase by 3 times the resw size
					case "RESW":
						_locationCounter += 3 * Integer.parseInt(statement
								.operand1());
						break;
					//if resb, we increase by the byte from statement
					case "RESB":
						_locationCounter += Integer.parseInt(statement
								.operand1());
						break;
					//if byte, we much pull the byte or character out
					case "BYTE":
						String s = statement.operand1();

						switch (s.charAt(0)) {
						case 'C':
							//minus 3 because of the c''
							_locationCounter += (s.length() - 3);
							break;
						case 'X':
							//minus 3 because of x'', then devide by 2 since half bytes
							_locationCounter += (s.length() - 3) / 2;
							break;
						}
						break;
					//do nothing if base
					case "BASE":
					//do nothing if no base
					case "NOBASE":
						break;
					//else (regular statement)
					default:
						//check optab if this operation exists
						if (OPTAB.containsKey(statement.operation())) {
							if (_firstExecAddress < 0) {
								_firstExecAddress = _locationCounter;
							}
							
							//get the optab format
							switch (OPTAB.get(statement.operation()).format()) {
							//if one, simply increase loc by 1
							case "1":
								_locationCounter += 1;
								break;
							//if two, increase loc by 2
							case "2":
								_locationCounter += 2;
								break;
							//if three/four, check if extended, if so, add 4, else 3
							case "3/4":
								_locationCounter += 3 + (statement.isExtended() ? 1
										: 0);
								break;
							}
						} else {
							throw new InvalidOperationCodeException(statement);
						}
					}

					//==============================
					 System.out.println(statement);
					//==============================
					//write the statement object to interfile
					objOutputStream.writeObject(statement);
				} catch (DuplicateSymbolException
						| InvalidOperationCodeException e) {
					//catch exceptions
					System.out.println(e.getMessage());
				}
			}
			
			//calculate the program length
			_programLength = _locationCounter - _startAddress;
		}
	}

	/**
	 * Perform the second pass.  Takes the inter file and reads back into memory,
	 * then creates the appropriate object code files
	 * @param input - interfile from pass 1
	 * @param output - destination output file
	 * @throws IOException - interfile not found
	 * @throws ClassNotFoundException
	 */
	private void secondPass(File input, File output) throws IOException,
			ClassNotFoundException {
		// build the input stream
		try (FileInputStream istream = new FileInputStream(input);
				ObjectInputStream objInputStream = new ObjectInputStream(
						istream);

		//create the object program file
		FileWriter objectProgram = new FileWriter(output)) {

		//create a list of records for modification
		List<Record> mRecords = new ArrayList<>();
		
		//create a text record based on the start address
		TextRecord textRecord = new TextRecord(_startAddress);
		
		//default the last record address to the start of the program
		int lastRecordAddress = _startAddress;

		//while the interfile still has statement objects
		while (istream.available() > 0) {
			//build the statement object from the file
			Statement statement = (Statement) objInputStream.readObject();
			
			//if it's a comment, ignore
			if (statement.isComment()) {
				continue;
			}
			
			//if this is the start
			if (statement.compareTo("START") == 0) {
				//write the header record
				objectProgram
						.write(new HeaderRecord(statement.label(),
								_startAddress, _programLength)
								.toObjectProgram() + '\n');
			//if end, break.  (we will write the end record later
			} else if (statement.compareTo("END") == 0) {
				break;
			//else, we are on text record
			} else {
				//assemble the instruction from the statement object
				String objectCode = assembleInstruction(statement);

				//if it is format 4 and not immediate value
				if (statement.isExtended()
						&& SYMTAB.containsKey(statement.operand1())) {
					mRecords.add(new ModificationRecord(statement
							.location() + 1, 5));
				}
				
				//================================================
				//System.out.println(statement + "\t\t" + objectCode);
				//================================================
				if (	statement.location() - lastRecordAddress >= 0x1000
						|| textRecord.add(objectCode) == false) {
					objectProgram.write(textRecord.toObjectProgram() + '\n');

					textRecord = new TextRecord(statement.location());
					textRecord.add(objectCode);
				}

				lastRecordAddress = statement.location();
			}
		}

		objectProgram.write(textRecord.toObjectProgram() + '\n');

		for (Record r : mRecords) {
			objectProgram.write(r.toObjectProgram() + '\n');
		}

		objectProgram.write(new EndRecord(_firstExecAddress)
				.toObjectProgram() + '\n');
		}
	}

	private String assembleInstruction(Statement statement) {
		String objCode = "";

		if (OPTAB.containsKey(statement.operation())) {
			switch (OPTAB.get(statement.operation()).format()) {
			case "1":
				objCode = OPTAB.get(statement.operation()).opcode();

				break;
			case "2":
				objCode = OPTAB.get(statement.operation()).opcode();

				objCode += Integer
						.toHexString(REGTAB.get(statement.operand1()))
						.toUpperCase();
				objCode += Integer
						.toHexString(REGTAB.get(statement.operand2()))
						.toUpperCase();

				break;
			case "3/4":
				final int n = 1 << 5;
				final int i = 1 << 4;
				final int x = 1 << 3;
				final int b = 1 << 2;
				final int p = 1 << 1;
				final int e = 1;

				int code = Integer.parseInt(OPTAB.get(statement.operation())
						.opcode(), 16) << 4;
				String operand = statement.operand1();

				if (operand == null) {
					code = (code | n | i) << 12; // for RSUB, NOBASE
				} else {
					switch (operand.charAt(0)) {
					case '#': // immediate addressing
						code |= i;
						operand = operand.substring(1);
						break;
					case '@': // indirect addressing
						code |= n;

						operand = operand.substring(1);
						break;
					default: // simple/direct addressing
						code |= n | i;

						if (statement.operand2() != null) {
							code |= x;
						}
					}

					int disp;

					if (SYMTAB.get(operand) == null) {
						disp = Integer.parseInt(operand);

					} else {
						int targetAddress = SYMTAB.get(operand);

						disp = targetAddress;

						if (statement.isExtended() == false) {
							disp -= statement.location() + 3;

							if (disp >= -2048 && disp <= 2047) {
								code |= p;
							} else {
								code |= b;

								disp = targetAddress - _baseAddress;
							}
						}
					}

					if (statement.isExtended()) {
						code |= e;

						code = (code << 20) | (disp & 0xFFFFF);
					} else {
						code = (code << 12) | (disp & 0xFFF);
					}
				}

				objCode = String.format(statement.isExtended() ? "%08X"
						: "%06X", code);

				break;
			}
		} else if (statement.compareTo("BYTE") == 0) {
			String s = statement.operand1();
			char type = s.charAt(0);

			s = s.substring(s.indexOf('\'') + 1, s.lastIndexOf('\''));

			switch (type) {
			case 'C':
				for (char ch : s.toCharArray()) {
					objCode += Integer.toHexString(ch).toUpperCase();
				}

				break;
			case 'X':
				objCode = s;

				break;
			}
		} else if (statement.compareTo("WORD") == 0) {
			objCode = String.format("%06X", statement.operand1());
		} else if (statement.compareTo("BASE") == 0) {
			_baseAddress = SYMTAB.get(statement.operand1());
		} else if (statement.compareTo("NOBASE") == 0) {
			_baseAddress = 0;
		}
		return objCode;
	}

	public static void main(String[] args) {
		try {
			SICAssemble asm = new SICAssemble();

			asm.assemble(new File("SRCFILE.txt"), new File("object_code.txt"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
}