import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

/**
 * Main controller for assembler. Contains the main function and logic to read
 * file, begin first and second pass, and write files.
 */
public class SICAssemble {
	// variable to store the program counter
	private int _locationCounter;

	// variable to store the start address
	private int _startAddress;

	// variable to store the first executable address (for use in end record)
	private int _firstExecAddress;

	// variable to store the program length
	private int _programLength;

	// variable to store the base address for type 3/4 statements
	private int _baseAddress;

	// variables to store optab, registertab, and symboltab
	private final Map<String, Instruction> OPTAB;
	private final Map<String, Integer> REGTAB;
	private final Map<String, Integer> SYMTAB;

	/**
	 * Constructor for the assembler.
	 */
	public SICAssemble() {
		// build the optab
		OPTAB = TableBuilder.getOPTAB();

		// build the register tab
		REGTAB = TableBuilder.getREGTAB();

		// construct an empty symmtab
		SYMTAB = new HashMap<>();

		// add a null entry so it isn't accidentally inserted later
		SYMTAB.put(null, 0);
	}

	/**
	 * Begin assembly. Takes in input file and an output file as arguments.
	 * 
	 * @param input - input SIC file
	 * @param output - output object code file
	 * @throws IOException - File not found
	 * @throws ClassNotFoundException
	 *             -
	 */
	public void assemble(File input, File output) throws IOException,
			ClassNotFoundException {
		// this is where we will store our java interfile
		File interFile = new File(".assembler.tmp");

		try {
			// create the new file
			interFile.createNewFile();

			// perform the first pass, save the data to the inter file
			firstPass(input, interFile);

			// perform the second pass, save the data to object file
			secondPass(interFile, output);
		} finally {
			interFile.delete();
		}
	}

	/**
	 * Perform the first pass on the source file. 
	 * 1. Assign addresses to all statements in the program. 
	 * 2. Save the values (Addresses) assigned to all labels for use in Pass 2. 
	 * 3. Perform some processing of assembler directives. (This includes processing 
	 * that affects address assignment, such as determining the length of data areas 
	 * defined by BYTE, RESW, etc.)
	 * 
	 * @param input - sic program file location
	 * @param output - where interfile should be stored
	 * @throws IOException - file not found or cannot be read
	 */
	private void firstPass(File input, File output) throws IOException {
		// build the scanner
		try (Scanner scanner = new Scanner(input);
				//set the output stream to the interfile
				FileOutputStream ostream = new FileOutputStream(output);
				
				//build an object output stream to store our Statement objects
				ObjectOutputStream objOutputStream = new ObjectOutputStream(
						ostream);) {
			
			//default location
			_locationCounter = _startAddress = 0;
			
			//default first executable address
			_firstExecAddress = -1;

			//while still has lines
			while (scanner.hasNext()) {
				try {
					//parse the current line
					Statement statement = Statement.parse(scanner.nextLine());

					//if it's null or comment, break
					if (statement == null || statement.isComment()) {
						continue;
					}

					//else.. set the counter to current loc
					statement.setLocation(_locationCounter);
					
					//if the label is not null, check if it's in symtab.
					//if so, we must alert there is a duplicate symbol.
					if (statement.label() != null) {
						if (SYMTAB.containsKey(statement.label())) {
							InterFileWriter.write("ERROR:  Duplicate symbol found: " + statement.label());
							throw new Exception("ERROR:  Duplicate symbol found: " + statement.label());
						} else {
							SYMTAB.put(statement.label(), _locationCounter);
						}
					}
					
					//check the operation for special cases
					switch (statement.operation()) {
					//if start, set start address here
					case "START":
						_startAddress = Integer.parseInt(statement.firstOperand());
						statement.setLocation(_locationCounter = _startAddress);
						break;
					//if end, ignore line
					case "END":
						break;
					//if word, we increase loc by 3
					case "WORD":
						_locationCounter += 3;
						break;
					//if resw, we increase by 3 times the resw size
					case "RESW":
						_locationCounter += 3 * Integer.parseInt(statement
								.firstOperand());
						break;
					//if resb, we increase by the byte from statement
					case "RESB":
						_locationCounter += Integer.parseInt(statement
								.firstOperand());
						break;
					//if byte, we much pull the byte or character out
					case "BYTE":
						String s = statement.firstOperand();

						switch (s.charAt(0)) {
						case 'C':
							//minus 3 because of the c''
							_locationCounter += (s.length() - 3);
							break;
						case 'X':
							//minus 3 because of x'', then devide by 2 since half bytes
							_locationCounter += (s.length() - 3) / 2;
							break;
						}
						break;
					//do nothing if base
					case "BASE":
					//do nothing if no base
					case "NOBASE":
						break;
					//else (regular statement)
					default:
						//check optab if this operation exists
						if (OPTAB.containsKey(statement.operation())) {
							if (_firstExecAddress < 0) {
								_firstExecAddress = _locationCounter;
							}
							
							//get the optab format
							switch (OPTAB.get(statement.operation()).format()) {
							//if one, simply increase loc by 1
							case "1":
								_locationCounter += 1;
								break;
							//if two, increase loc by 2
							case "2":
								_locationCounter += 2;
								break;
							//if three/four, check if extended, if so, add 4, else 3
							case "3/4":
								_locationCounter += 3 + (statement.isExtended() ? 1
										: 0);
								break;
							}
						} else {
							InterFileWriter.write("ERROR: Invalid operation code found: " + statement.operation());
							throw new Exception("ERROR: Invalid operation code found: " + statement.operation());
						}
					}

					//==============================
					 InterFileWriter.write(statement.toString());
					//==============================
					//write the statement object to interfile
					objOutputStream.writeObject(statement);
				} catch (Exception e) {
					//catch exceptions
					e.printStackTrace();
					System.exit(-1);
				}
			}
			
			//calculate the program length
			_programLength = _locationCounter - _startAddress;
		}
	}

	/**
	 * Perform the second pass.  Takes the inter file and reads back into memory,
	 * then creates the appropriate object code files
	 * 1.	Assemble instructions (translating operation codes and looking up
	 * 		addresses).
	 * 2.	Generate data values defined by BYTE, WORD, etc.
	 * 3.	Perform processing of assembler directives not done during Pass 1.
	 * 4.	Write the object program and the assembly listing.
	 * @param input - interfile from pass 1
	 * @param output - destination output file
	 * @throws IOException - interfile not found
	 * @throws ClassNotFoundException
	 */
	private void secondPass(File input, File output) throws IOException,
			ClassNotFoundException {
		// build the input stream
		try (FileInputStream istream = new FileInputStream(input);
				ObjectInputStream objInputStream = new ObjectInputStream(
						istream);

		//create the object program file
		FileWriter objectProgram = new FileWriter(output)) {

		//create a list of records for modification
		List<ObjectRecordInterface> mRecords = new ArrayList<>();
		
		//create a text record based on the start address
		ObjectTextRecord textRecord = new ObjectTextRecord(_startAddress);
		
		//default the last record address to the start of the program
		int lastRecordAddress = _startAddress;

		//while the interfile still has statement objects
		while (istream.available() > 0) {
			//build the statement object from the file
			Statement statement = (Statement) objInputStream.readObject();
			
			//if it's a comment, ignore
			if (statement.isComment()) {
				continue;
			}
			
			//if this is the start
			if (statement.compareTo("START") == 0) {
				//write the header record
				objectProgram
						.write(new ObjectHeaderRecord(statement.label(),
								_startAddress, _programLength)
								.toObjectProgram() + '\n');
			//if end, break.  (we will write the end record later
			} else if (statement.compareTo("END") == 0) {
				break;
			//else, we are on text record
			} else {
				//assemble the instruction from the statement object
				String objectCode = assembleInstruction(statement);

				//if it is format 4 and not immediate value
				if (statement.isExtended()
						&& SYMTAB.containsKey(statement.firstOperand())) {
					mRecords.add(new ObjectModRecord(statement
							.location() + 1, 5));
				}			
				
				int stateLength = 0;
				if(statement.firstOperand()!=null)
					stateLength+=statement.firstOperand().length();
				if(statement.secondOperand()!=null)
					stateLength+=statement.secondOperand().length();
				if(stateLength >= 4)
					AssemblyListingWriter.write((statement + "\t\t" + objectCode));
				else
					AssemblyListingWriter.write((statement + "\t\t\t" + objectCode));
				
				//handle if we need to make a new line
				if (	statement.location() - lastRecordAddress >= 0x1000
						|| textRecord.add(objectCode) == false) {
					objectProgram.write(textRecord.toObjectProgram() + '\n');

					textRecord = new ObjectTextRecord(statement.location());
					textRecord.add(objectCode);
				}
				
				//set the last record address
				lastRecordAddress = statement.location();
			}
		}

		//write the remaning text records
		objectProgram.write(textRecord.toObjectProgram() + '\n');
		
		//write the modification records
		for (ObjectRecordInterface r : mRecords) {
			objectProgram.write(r.toObjectProgram() + '\n');
		}
		
		//write the end record
		objectProgram.write(new ObjectRecordEnd(_firstExecAddress)
				.toObjectProgram() + '\n');
		}
	}

	/**
	 * Converts a statement into object code.
	 * @param statement - statement object to convert
	 * @return - string representation of object code
	 */
	private String assembleInstruction(Statement statement) {
		//instantiate
		String objCode = "";

		//of the optab contains the opcode
		if (OPTAB.containsKey(statement.operation())) {
			//begins witch on optab format
			switch (OPTAB.get(statement.operation()).format()) {
			//if format 1
			case "1":
				//simply write the opcode to object code
				objCode = OPTAB.get(statement.operation()).opcode();
				break;
			//if format 2
			case "2":
				//calculate the addresses of r1 and r2, write to objcode
				objCode = OPTAB.get(statement.operation()).opcode();

				objCode += Integer
						.toHexString(REGTAB.get(statement.firstOperand()))
						.toUpperCase();
				objCode += Integer
						.toHexString(REGTAB.get(statement.secondOperand()))
						.toUpperCase();

				break;
			//if format 3 or 4
			case "3/4":
				//instantiate our n i x b p e variables
				final int n = 1 << 5;
				final int i = 1 << 4;
				final int x = 1 << 3;
				final int b = 1 << 2;
				final int p = 1 << 1;
				final int e = 1;
				
				//get the opcode, shift bit left 4
				int code = Integer.parseInt(OPTAB.get(statement.operation()).opcode(), 16) << 4;
				
				//get the operand
				String operand = statement.firstOperand();

				//if the operand is null (this handles rsub, nobase, etc)
				if (operand == null) {
					code = (code | n | i) << 12;
				//else
				} else {
					switch (operand.charAt(0)) {
					//handle direct addressing
					case '#':
						//turn on i bit
						code |= i;
						//set the operand to everything after hash
						operand = operand.substring(1);
						break;
					// indirect addressing
					case '@':
						//turn on n bit
						code |= n;
						//set the operand to everything after the @
						operand = operand.substring(1);
						break;
					// simple/direct addressing
					default:
						//turn on n and i bit
						code |= n | i;
						//if indexed, turn on x bit
						if (statement.secondOperand() != null) {
							code |= x;
						}
					}
					
					//define displacement address to 0
					int disp;

					//if operand not in symtab, disp becomes the operand value
					if (SYMTAB.get(operand) == null) {
						disp = Integer.parseInt(operand);
					//if the symtab does contain
					} else {
						//get the target address
						int targetAddress = SYMTAB.get(operand);

						//default, disp = target address
						disp = targetAddress;

						//if extended statement
						if (statement.isExtended() == false) {
							//displacement = disp - statloc + 3
							disp -= statement.location() + 3;
							
							//turn on p and b bits if neccessary
							if (disp >= -2048 && disp <= 2047) {
								code |= p;
							} else {
								code |= b;
								//calculate new target address
								disp = targetAddress - _baseAddress;
							}
						}
					}
					
					//turn on extended bit if needed
					if (statement.isExtended()) {
						code |= e;
						//bit shift code 20, append displacement
						code = (code << 20) | (disp & 0xFFFFF);
					} else {
						//bit shift code 12, append displacement
						code = (code << 12) | (disp & 0xFFF);
					}
				}
				
				//generate the final code(!)
				objCode = String.format(statement.isExtended() ? "%08X"
						: "%06X", code);

				break;
			}
		//else if statement is byte
		} else if (statement.compareTo("BYTE") == 0) {
			//get the operand
			String s = statement.firstOperand();
			
			//get the type
			char type = s.charAt(0);
			
			//retrive the byte
			s = s.substring(s.indexOf('\'') + 1, s.lastIndexOf('\''));

			//handle cases C and X
			switch (type) {
			case 'C':
				for (char ch : s.toCharArray()) {
					objCode += Integer.toHexString(ch).toUpperCase();
				}

				break;
			case 'X':
				objCode = s;
				break;
			}
		//if word
		} else if (statement.compareTo("WORD") == 0) {
			//write the word to object code
			objCode = String.format("%06X", statement.firstOperand());
		//if base
		} else if (statement.compareTo("BASE") == 0) {
			//set the base address
			_baseAddress = SYMTAB.get(statement.firstOperand());
		//if nobase
		} else if (statement.compareTo("NOBASE") == 0) {
			//unset base address
			_baseAddress = 0;
		}
		//return the object code
		return objCode;
	}
	
	/**
	 * Main function
	 * @param args - program arguments
	 */
	public static void main(String[] args) {
		
		if(		args.length < 1 
				|| args[0].contains("--help") 
				|| args[0].contains("-h"))
		{
			System.out.println("Usage:");
			System.out.println("java -jar sic_assemble.jar [path-to-src-file]");
			System.exit(-1);
		}
		
		String inputFile = args[0];
		String outputFile = "object_code.txt";
		String interFile = "inter_file.txt";
		String assemblyListingFile = "assembly_listing.txt";
		
		try 
		{
			//build sic assemble object
			SICAssemble assembler = new SICAssemble();
			
			//initialize our interfile writer
			InterFileWriter.filePath = interFile;
			InterFileWriter.init();
			
			//initialize our assemblylisting file writer
			AssemblyListingWriter.filePath = assemblyListingFile;
			AssemblyListingWriter.init();
			
			System.out.println("Starting assembly.");
			System.out.println("Target source file: " + inputFile);
			System.out.println("...");
			//go
			assembler.assemble(new File(inputFile), new File(outputFile));
			
			System.out.println("Assembly complete.");
			System.out.println("Files saved to local directory.");
			System.out.println("Object-code file name: " + outputFile);
			System.out.println("Inter-file file name:  " + interFile);
			System.out.println("Assembly-listing-file file name: " + assemblyListingFile);
		}
		//handle possible exceptions
		catch (IOException | ClassNotFoundException e) 
		{
			e.printStackTrace();
		}
	}
}